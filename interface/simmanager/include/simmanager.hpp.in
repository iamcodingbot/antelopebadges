#include <eosio/eosio.hpp>

using namespace std;
using namespace eosio;

#cmakedefine NOTIFICATION_CONTRACT "@NOTIFICATION_CONTRACT@"
#cmakedefine SIMPLE_NOTIFICATION_CONTRACT "@SIMPLE_NOTIFICATION_CONTRACT@"
#cmakedefine ORG_CHECKS_CONTRACT_NAME "@ORG_CHECKS_CONTRACT_NAME@"
#cmakedefine SIMPLE_VALIDATION_CONTRACT "@SIMPLE_VALIDATION_CONTRACT@"
#cmakedefine ORCHESTRATOR_CONTRACT "@ORCHESTRATOR_CONTRACT@"

CONTRACT simmanager : public contract {
  public:
    using contract::contract;

    ACTION initsimple (name org, name creator, 
      name badge, 
      vector<name> parent_badges,
      string offchain_lookup_data, 
      string onchain_lookup_data,
      vector<name> consumers,
      string memo);
      
    ACTION givesimple (name org,
     name badge, 
     name authorizer, 
     name to, 
     string memo );

    ACTION ninitsimpl (name org,
      name badge, 
      vector<name> parent_badges,
      string offchain_lookup_data, 
      string onchain_lookup_data, 
      string memo);

    // action notifying simplebadge contract. starts with "n"
    ACTION ngivesimpl(name org,
      name to, 
      name badge,
      uint64_t amount, 
      string memo );
      
    ACTION simplebatch (name org, 
      name badge, 
      name authorizer, 
      vector<name> to, 
      string memo);

    ACTION naddfeatur (name org,
      name badge_name, 
      name notify_account, 
      string memo);

    

  private:
    TABLE checks {
      name org;
      name checks_contract;
      auto primary_key() const { return org.value; }
    };
    typedef multi_index<name("checks"), checks> checks_table;

    void notify_checks_contract(name org) {
      checks_table _checks( name(ORG_CHECKS_CONTRACT_NAME), get_self().value );
      auto itr = _checks.find(org.value);
      if(itr != _checks.end()) {
        require_recipient(itr->checks_contract);
      }
    }
    
    struct addfeature_args {
      name org;
      name badge_name;
      name notify_account;
      string memo;
    };

    struct createsimple_args {
      name org;
      name badge;
      vector<name> parent_badges;
      string offchain_lookup_data; 
      string onchain_lookup_data;
      string memo;
    };

    struct issuesimple_args {
      name org;
      name to;
      name badge;
      uint64_t amount;
      string memo;
    };
};
