#include <eosio/eosio.hpp>

using namespace std;
using namespace eosio;

#cmakedefine EDEN_ORG_INTERFACE_CONTRACT "@SIMPLEBADGE_CREATE@"

#define SIMPLEBADGE_CREATE EDEN_ORG_INTERFACE_CONTRACT"::initsimple"
#define SIMPLEBADGE_GIVE EDEN_ORG_INTERFACE_CONTRACT"::givesimple"
#define SERIESBADGE_DEFINE EDEN_ORG_INTERFACE_CONTRACT"::defineseries"
#define SERIESBADGE_CREATE EDEN_ORG_INTERFACE_CONTRACT"::initseriesbdg"
#define SERIESBADGE_GIVE EDEN_ORG_INTERFACE_CONTRACT"::givelatestsb"


CONTRACT edenvalidate : public contract {
  public:
    using contract::contract;

    ACTION addmember (name member);
    ACTION addrole(name member, name role) ;

    [[eosio::on_notify(SIMPLEBADGE_CREATE)]] void simcreatechk (name creator, 
      name badge, 
      vector<name> parent_badges,
      string offchain_lookup_data, 
      string onchain_lookup_data,
      vector<name> consumers,
      string memo);

    [[eosio::on_notify(SIMPLEBADGE_GIVE)]] void simgivechk (name badge, name authorizer, name to, string memo );

    [[eosio::on_notify(SERIESBADGE_DEFINE)]] void serdefchk (name creator, name family);

    [[eosio::on_notify(SERIESBADGE_CREATE)]] void sercreatechk (name creator, 
      name family, 
      name badge, 
      string offchain_lookup_data, 
      string onchain_lookup_data,
      vector<name> consumers,
      string memo);
    
    [[eosio::on_notify(SERIESBADGE_GIVE)]] void sergivechk (name issuer, name family, name to, string memo);

  private:
    TABLE members {
      name    member;
      vector<name>  roles;
      auto primary_key() const { return member.value; }
    };
    typedef multi_index<name("members"), members> members_table;

    bool hasRole(name member, name role) {
      members_table _members (get_self(), get_self().value);
      auto itr = _members.find(member.value);
      check(itr != _members.end(), "<creator> is not a member") ;
      vector<name> roles = itr->roles;
      bool rolefound = false;
      for(auto i = 0 ; i < roles.size(); i++) {
        if (roles[i] == name("sbcreator") || roles[i] == name("admin")) {
          rolefound = true;
          return rolefound;
        }
      }
      return rolefound;
    }
};
