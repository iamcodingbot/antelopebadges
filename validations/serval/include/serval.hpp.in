#include <eosio/eosio.hpp>

using namespace std;
using namespace eosio;

#cmakedefine SERIES_INTERFACE_CONTRACT "@SERIES_INTERFACE_CONTRACT@"

#define SERIES_INTERFACE_CREATE_SERIES_NOTIFICATION SERIES_INTERFACE_CONTRACT"::createseries" 
#define SERIES_INTERFACE_CREATE_NEXT_NOTIFICATION SERIES_INTERFACE_CONTRACT"::createnext" 
#define SERIES_INTERFACE_ISSUE_LATEST_NOTIFICATION SERIES_INTERFACE_CONTRACT"::issuelatest" 
#define SERIES_INTERFACE_ISSUE_ANY_NOTIFICATION SERIES_INTERFACE_CONTRACT"::issueany" 
#define SERIES_INTERFACE_ISSUE_BATCH_NOTIFICATION SERIES_INTERFACE_CONTRACT"::serieslbatch" 

CONTRACT serval : public contract {
 public:
    using contract::contract;

   [[eosio::on_notify(SERIES_INTERFACE_CREATE_SERIES_NOTIFICATION)]] void series (name org, 
      name authorized, 
      name series);

    [[eosio::on_notify(SERIES_INTERFACE_CREATE_NEXT_NOTIFICATION)]]  void next (name org, 
      name authorized, 
      name series, 
      name badge, 
      string offchain_lookup_data, 
      string onchain_lookup_data, 
      vector<name> consumers,
      string memo);

    [[eosio::on_notify(SERIES_INTERFACE_ISSUE_LATEST_NOTIFICATION)]]  void latest (name org,
      name authorized, 
      name series, 
      name to, 
      uint64_t count, 
      string memo);

    [[eosio::on_notify(SERIES_INTERFACE_ISSUE_ANY_NOTIFICATION)]]  void any (name org,
      name authorized,
      name series,
      uint64_t seq_id,
      name to,
      uint64_t count,
      string memo);
    
    [[eosio::on_notify(SERIES_INTERFACE_ISSUE_BATCH_NOTIFICATION)]]  void batch (name org, 
      name authorized, 
      name series, 
      vector<name> to, 
      string memo);

    ACTION addseriesauth(name org, name action, name series, name authorized_account);

    ACTION delseriesauth(name org, name action, name series, name authorized_account);

    ACTION addactionauth (name org, name action, name authorized_account);

    ACTION delactionauth (name org, name action, name authorized_account);


  private:
    TABLE actionauths {
      name  action;
      vector<name>  authorized_accounts;
      auto primary_key() const { return action.value; }
    };
    typedef multi_index<name("actionauths"), actionauths> actionauths_table;

    TABLE seriesauths {
      uint64_t id;
      name action;
      name series;
      vector<name> authorized_accounts;

      uint64_t primary_key() const { return id; }
      uint128_t secondary_key() const { return combine_names(action, series); }

      static uint128_t combine_names(const name& a, const name& b) {
          return (uint128_t{a.value} << 64) | b.value;
      }
    };

    typedef eosio::multi_index<"seriesauths"_n, seriesauths,
        indexed_by<"actionseries"_n, const_mem_fun<seriesauths, uint128_t, &seriesauths::secondary_key>>
    > seriesauths_table;

    bool has_action_authority (name org, name action, name account) {
      actionauths_table _actionauths_table (get_self(), org.value);
      auto itr = _actionauths_table.find(action.value);
      if(itr == _actionauths_table.end()) {
        return false;
      }
      auto authorized_accounts = itr->authorized_accounts;
      for(auto i = 0; i < authorized_accounts.size(); i++) {
        if(authorized_accounts[i] == account) {
          return true;
        }
      }
      return false;
    }

    bool has_series_authority (name org, name action, name series, name account) {
      seriesauths_table seriesauths(get_self(), org.value);
      auto secondary_index = seriesauths.get_index<"actionseries"_n>();
      uint128_t secondary_key = seriesauths::combine_names(action, series);
      auto itr = secondary_index.find(secondary_key);
      if(itr == secondary_index.end() || itr->action != action || itr->series != series) {
        return false;
      }
      auto authorized_accounts = itr->authorized_accounts;
      for(auto i = 0; i < authorized_accounts.size(); i++) {
        if(authorized_accounts[i] == account) {
          return true;
        }
      }
      return false;
    }
};

