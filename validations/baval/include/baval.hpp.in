#include <eosio/eosio.hpp>
#include <eosio/asset.hpp>

using namespace std;
using namespace eosio;

#cmakedefine BOUNDED_AGG_MANAGER_CONTRACT "@BOUNDED_AGG_MANAGER_CONTRACT@"
#cmakedefine ORG_CONTRACT "@ORG_CONTRACT@"

#define BOUNDED_AGG_MANAGER_INIT_AGG_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::initagg"
#define BOUNDED_AGG_MANAGER_INIT_SEQ_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::initseq"
#define BOUNDED_AGG_MANAGER_ACTIVATE_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::actseq"
#define BOUNDED_AGG_MANAGER_ACTIVATE_ALL_INIT_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::actseqai"
#define BOUNDED_AGG_MANAGER_ACTIVATE_FIRST_INIT_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::actseqfi"
#define BOUNDED_AGG_MANAGER_END_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::endseq"
#define BOUNDED_AGG_MANAGER_END_ALL_ACTIVE_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::endseqaa"
#define BOUNDED_AGG_MANAGER_END_FIRST_ACTIVE_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::endseqfa"
#define BOUNDED_AGG_MANAGER_ADD_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::addbadge"

#define BOUNDED_AGG_MANAGER_ADD_INIT_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::addinitbadge"
#define BOUNDED_AGG_MANAGER_REM_INIT_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::reminitbadge"
#define BOUNDED_AGG_MANAGER_ADD_STAT_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::addstatbadge"
#define BOUNDED_AGG_MANAGER_REM_STAT_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::remstatbadge"
#define BOUNDED_AGG_MANAGER_PAUSE_ALL_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::pauseall"
#define BOUNDED_AGG_MANAGER_PAUSE_BADGE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::pausebadge"
#define BOUNDED_AGG_MANAGER_PAUSE_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::pausebadges"
#define BOUNDED_AGG_MANAGER_PAUSE_ALL_FIRST_ACTIVE_SEQUENCE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::pauseallfa"
#define BOUNDED_AGG_MANAGER_RESUME_ALL_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::resumeall"
#define BOUNDED_AGG_MANAGER_RESUME_BADGE_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::resumebadge"
#define BOUNDED_AGG_MANAGER_RESUME_BADGES_NOTIFICATION BOUNDED_AGG_MANAGER_CONTRACT"::resumebadges"

CONTRACT baval : public contract {
  public:
    using contract::contract;

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_INIT_AGG_NOTIFICATION)]]
    void initagg(name authorized, symbol agg_symbol, vector<symbol> badge_symbols, vector<symbol> stats_badge_symbols, string agg_description);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ADD_INIT_BADGES_NOTIFICATION)]]
    void addinitbadge(name authorized, symbol agg_symbol, vector<symbol> badge_symbols);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_REM_INIT_BADGES_NOTIFICATION)]]    
    void reminitbadge(name authorized, symbol agg_symbol, vector<symbol> badge_symbols);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ADD_STAT_BADGES_NOTIFICATION)]]    
    void addstatbadge(name authorized, symbol agg_symbol, vector<symbol> badge_symbols);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_REM_STAT_BADGES_NOTIFICATION)]]    
    void remstatbadge(name authorized, symbol agg_symbol, vector<symbol> badge_symbols);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_INIT_SEQ_NOTIFICATION)]]
    void initseq(name authorized, symbol agg_symbol, string sequence_description);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ACTIVATE_SEQUENCE_NOTIFICATION)]]
    void actseq(name authorized, symbol agg_symbol, vector<uint64_t> seq_ids);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ACTIVATE_ALL_INIT_SEQUENCE_NOTIFICATION)]]
    void actseqai(name authorized, symbol agg_symbol);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ACTIVATE_FIRST_INIT_SEQUENCE_NOTIFICATION)]]
    void actseqfi(name authorized, symbol agg_symbol);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_END_SEQUENCE_NOTIFICATION)]]
    void endseq(name authorized, symbol agg_symbol, vector<uint64_t> seq_ids);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_END_ALL_ACTIVE_SEQUENCE_NOTIFICATION)]]
    void endseqaa(name authorized, symbol agg_symbol);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_END_FIRST_ACTIVE_SEQUENCE_NOTIFICATION)]]
    void endseqfa(name authorized, symbol agg_symbol);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_ADD_BADGES_NOTIFICATION)]]
    void addbadge(name authorized, symbol agg_symbol, vector<uint64_t> seq_ids, vector<symbol> badge_symbols);

    [[eosio::on_notify(BOUNDED_AGG_MANAGER_PAUSE_ALL_NOTIFICATION)]]
    void pauseall(name authorized, symbol agg_symbol, uint64_t seq_id);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_PAUSE_BADGE_NOTIFICATION)]]
    void pausebadge(name authorized, symbol agg_symbol, uint64_t badge_agg_seq_id);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_PAUSE_BADGES_NOTIFICATION)]]
    void pausebadges(name authorized, symbol agg_symbol, uint64_t seq_id, vector<symbol> badge_symbols);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_PAUSE_ALL_FIRST_ACTIVE_SEQUENCE_NOTIFICATION)]]
    void pauseallfa(name authorized, symbol agg_symbol);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_RESUME_ALL_NOTIFICATION)]]
    void resumeall(name authorized, symbol agg_symbol, uint64_t seq_id);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_RESUME_BADGE_NOTIFICATION)]]
    void resumebadge(name authorized, symbol agg_symbol, uint64_t badge_agg_seq_id);
    
    [[eosio::on_notify(BOUNDED_AGG_MANAGER_RESUME_BADGES_NOTIFICATION)]]
    void resumebadges(name authorized, symbol agg_symbol, uint64_t seq_id, vector<symbol> badge_symbols);




    ACTION addaggauth(name org, name action, name agg, name authorized_account);
    ACTION delaggauth(name org, name action, name agg, name authorized_account);
    ACTION addactionauth (name org, name action, name authorized_account);
    ACTION delactionauth (name org, name action, name authorized_account);
  private:

    TABLE actionauths {
      name  action;
      vector<name>  authorized_accounts;
      auto primary_key() const { return action.value; }
    };
    typedef multi_index<name("actionauths"), actionauths> actionauths_table;

    TABLE aggauths {
      uint64_t id;
      name action;
      name agg;
      vector<name> authorized_accounts;

      uint64_t primary_key() const { return id; }
      uint128_t secondary_key() const { return combine_names(action, agg); }

      static uint128_t combine_names(const name& a, const name& b) {
          return (uint128_t{a.value} << 64) | b.value;
      }
    };

    typedef eosio::multi_index<"aggauths"_n, aggauths,
        indexed_by<"byactionagg"_n, const_mem_fun<aggauths, uint128_t, &aggauths::secondary_key>>
    > aggauths_table;

    bool has_action_authority (name org, name action, name account) {
      actionauths_table _actionauths_table (get_self(), org.value);
      auto itr = _actionauths_table.find(action.value);
      if(itr == _actionauths_table.end()) {
        return false;
      }
      auto authorized_accounts = itr->authorized_accounts;
      for(auto i = 0; i < authorized_accounts.size(); i++) {
        if(authorized_accounts[i] == account) {
          return true;
        }
      }
      return false;
    }

    bool has_agg_authority (name org, name action, name agg, name account) {
      aggauths_table aggauths(get_self(), org.value);
      auto secondary_index = aggauths.get_index<"byactionagg"_n>();
      uint128_t secondary_key = aggauths::combine_names(action, agg);
      auto itr = secondary_index.find(secondary_key);
      if(itr == secondary_index.end() || itr->action != action || itr->agg != agg) {
        return false;
      }
      auto authorized_accounts = itr->authorized_accounts;
      for(auto i = 0; i < authorized_accounts.size(); i++) {
        if(authorized_accounts[i] == account) {
          return true;
        }
      }
      return false;
    }

            // Define the structure of the table
    TABLE orgcode {
      name org;         // Organization identifier, used as primary key
      name org_code;    // Converted org_code, ensuring uniqueness and specific format

      // Specify the primary key
      auto primary_key() const { return org.value; }

      // Specify a secondary index for org_code to ensure its uniqueness
      uint64_t by_org_code() const { return org_code.value; }
    };

    // Declare the table
    typedef eosio::multi_index<"orgcodes"_n, orgcode,
      eosio::indexed_by<"orgcodeidx"_n, eosio::const_mem_fun<orgcode, uint64_t, &orgcode::by_org_code>>
    > orgcode_index;


    name get_name_from_agg_symbol(const symbol& agg_symbol, string failure_identifier) {
        string agg_symbol_str = agg_symbol.code().to_string(); // Convert symbol to string
        check(agg_symbol_str.size() == 7, failure_identifier + "Aggregation symbol must have at least 4 characters.");

        // Extract the first 4 characters as org_code
        string agg_str = agg_symbol_str.substr(4, 7);

        for (auto & c: agg_str) {
            c = tolower(c);
        }
        return name(agg_str);
    }

    name get_org_from_internal_symbol(const symbol& agg_symbol, string failure_identifier) {
        string agg_symbol_str = agg_symbol.code().to_string(); // Convert symbol to string
        check(agg_symbol_str.size() >= 4, failure_identifier + "Aggregation symbol must have at least 4 characters.");

        // Extract the first 4 characters as org_code
        string org_code_str = agg_symbol_str.substr(0, 4);

        for (auto & c: org_code_str) {
            c = tolower(c);
        }
        name org_code = name(org_code_str);

        // Set up the orgcode table and find the org_code
        orgcode_index orgcodes(name(ORG_CONTRACT), name(ORG_CONTRACT).value);
        auto org_code_itr = orgcodes.get_index<"orgcodeidx"_n>().find(org_code.value);

        check(org_code_itr != orgcodes.get_index<"orgcodeidx"_n>().end(), failure_identifier + "Organization code not found.");
        check(org_code_itr->org_code == org_code, failure_identifier + "Organization code not found.");
        // Assuming the org is stored in the same row as the org_code
        return org_code_itr->org; // Return the found organization identifier
    }

};
