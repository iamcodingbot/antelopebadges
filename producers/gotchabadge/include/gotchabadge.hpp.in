#include <eosio/eosio.hpp>
#include <eosio/system.hpp>

using namespace std;
using namespace eosio;

#cmakedefine ORCHESTRATOR_CONTRACT_NAME "@ORCHESTRATOR_CONTRACT_NAME@"
#cmakedefine NOTIFICATION_CONTRACT "@NOTIFICATION_CONTRACT@"

#define GOTCHA_BADGE_CREATE_NOTIFICATION NOTIFICATION_CONTRACT"::initsimple"
#define GOTCHA_BADGE_ISSUANCE_NOTIFICATION NOTIFICATION_CONTRACT"::givesimple"

CONTRACT gotchabadge : public contract {
  public:
    using contract::contract;

    [[eosio::on_notify(GOTCHA_BADGE_CREATE_NOTIFICATION)]] void extcreate (
      name org, 
      name badge, 
      time_point_sec starttime, 
      uint64_t cycle_length, 
      uint8_t supply_per_cycle, 
      string offchain_lookup_data,
      string onchain_lookup_data,  
      string memo);

    [[eosio::on_notify(GOTCHA_BADGE_ISSUANCE_NOTIFICATION)]] void extissue (name org, 
      name badge, 
      name from, 
      name to, 
      uint8_t amount, 
      string memo); 

    ACTION create (name org, 
      name badge, 
      time_point_sec starttime, 
      uint64_t cycle_length, 
      uint8_t supply_per_cycle, 
      string offchain_lookup_data,
      string onchain_lookup_data,
      string memo);
      
    ACTION give (name org, 
      name badge, 
      name from, 
      name to, 
      uint8_t amount, 
      string memo );
  

  private:
   // scoped by org
    TABLE metadata {
      name badge;
      time_point_sec starttime; //0000
      uint64_t cycle_length; // 24 hrs
      time_point_sec last_known_cycle_start;
      time_point_sec last_known_cycle_end;
      uint8_t supply_per_cycle;
      auto primary_key() const {return badge.value; }
    };
    typedef multi_index<name("metadata"), metadata> metadata_table;

    // scoped by org
    TABLE stats {
      uint64_t id;
      name account;
      name badge;
      uint8_t balance;
      time_point last_claimed_time;
      auto primary_key() const {return id; }
      uint128_t acc_badge_key() const {
        return ((uint128_t) account.value) << 64 | badge.value;
      }
    };
    typedef multi_index<name("stats"), stats,
    indexed_by<name("accountbadge"), const_mem_fun<stats, uint128_t, &stats::acc_badge_key>>
    > stats_table;

    struct achievement_args {
      name org;
      name badge_contract;
      name badge_name;
      name account;
      name from;
      uint8_t count;
      string memo;
    };

    struct initbadge_args {
      name org; 
      name badge_contract; 
      name badge_name;
      string offchain_lookup_data; 
      string onchain_lookup_data; 
      string memo;
    }; 

    struct create_args { 
      name org; 
      name badge; 
      time_point_sec starttime; 
      uint64_t cycle_length; 
      uint8_t supply_per_cycle; 
      string offchain_lookup_data;
      string onchain_lookup_data; 
      string memo; 
    };

    struct issue_args { 
      name org; 
      name badge; 
      name from; 
      name to; 
      uint8_t amount; 
      string memo; 
    }; 

};
