#include <eosio/eosio.hpp>
#include <hyperloglog.hpp>

using namespace std;
using namespace eosio;

#cmakedefine SIMPLEBADGE_CONTRACT "@SIMPLEBADGE_CONTRACT@"
#cmakedefine ORCHESTRATOR_CONTRACT_NAME "@ORCHESTRATOR_CONTRACT_NAME@"
#define NEW_BADGE_ISSUANCE_NOTIFICATION ORCHESTRATOR_CONTRACT_NAME"::notifyachiev"

CONTRACT boundedhll : public contract {
  public:
    using contract::contract;
    // Notify on new badge issuance
    [[eosio::on_notify(NEW_BADGE_ISSUANCE_NOTIFICATION)]]
    void notifyachiev (
      name org, 
      name badge,
      name account, 
      name from,
      uint64_t count,
      string memo,  
      vector<name> notify_accounts
    );



    ACTION addround(name org, name round, string description);
    ACTION setstatus(name org, name round, name status);
    ACTION newemission(
    name org,
    name round,
    name badge,
    name sender_uniqueness_badge);

  private:

    TABLE rounds {
        name round;
        name status;
        string description;

        uint64_t primary_key() const { return round.value; }
    };
    typedef eosio::multi_index<"rounds"_n, rounds> rounds_table;

    TABLE badgeround {
        uint64_t badgeround_id;
        name round;
        name badge;
        name sender_uniqueness_badge;

        uint64_t primary_key() const { return badgeround_id; }
        uint128_t round_badge_key() const {
            return ((uint128_t) round.value) << 64 | badge.value;
        }
        uint64_t get_badge() const { return badge.value; }
    };
    typedef eosio::multi_index<"badgeround"_n, badgeround,
        indexed_by<"roundbadge"_n, const_mem_fun<badgeround, uint128_t, &badgeround::round_badge_key>>,
        indexed_by<"badge"_n, const_mem_fun<badgeround, uint64_t, &badgeround::get_badge>>
    > badgeround_table;

    TABLE balances {
        uint64_t     id;          // Primary Key
        name         account;     // EOS account name
        uint64_t badgeround_id;      // Badge name
        vector<uint8_t> hll;      // HyperLogLog data or any other binary data
        
        // Primary Key
        auto primary_key() const { return id; }

        // Composite Key: combination of account and badge
        uint128_t by_account_badge() const { return (static_cast<uint128_t>(account.value) << 64) | badgeround_id; }

    };

    typedef multi_index<"balances"_n, balances,
        indexed_by<"accountbadge"_n, const_mem_fun<balances, uint128_t, &balances::by_account_badge>>
    > balances_table;

    struct issue_args {
      name org;
      name to;
      name badge; 
      uint64_t amount;
      string memo;
    };
};
