#include <eosio/eosio.hpp>
#include <eosio/system.hpp>

using namespace std;
using namespace eosio;

#cmakedefine ORCHESTRATOR_CONTRACT_NAME "@ORCHESTRATOR_CONTRACT_NAME@"
#define NEW_BADGE_ISSUANCE_NOTIFICATION ORCHESTRATOR_CONTRACT_NAME"::notifyachiev"
#define NEW_BADGE_SUBSCRIPTION_NOTIFICATION ORCHESTRATOR_CONTRACT_NAME"::addnotify"

CONTRACT tap : public contract {
  public:
    using contract::contract;


    [[eosio::on_notify(NEW_BADGE_SUBSCRIPTION_NOTIFICATION)]] void notifyinit(
      name org,
      name badge,
      name notify_account,
      string memo,
      string offchain_lookup_data,
      string onchain_lookup_data,
      uint64_t rarity_counts);

    [[eosio::on_notify(NEW_BADGE_ISSUANCE_NOTIFICATION)]] void notifyachiev (name org, 
      name badge,
      name account, 
      name from,
      uint64_t count,
      string memo,
      vector<name> notify_accounts);

    ACTION pause(name org, name assetname);
    ACTION resume(name org, name assetname);
    ACTION timebound(name org, name assetname, time_point_sec start_time, time_point_sec end_time);
    ACTION supplybound(name org, name assetname, uint64_t supplycap);
    ACTION removesb(name org, name assetname);
    ACTION removetb(name org, name assetname);
  private:
    TABLE tapstatus {
      name badge;
      bool  pause;
      bool time_bound;
      time_point start_time;
      time_point end_time;
      bool supply_bound;
      uint64_t supplycap;
      uint64_t current_supply;
      auto primary_key() const { return badge.value; }
    };
    typedef multi_index<name("tapstatus"), tapstatus> tapstatus_table;
};
